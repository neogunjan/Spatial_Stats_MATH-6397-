library(readxl)
load('C:/Users/nsara/Documents/Grad_School/MATH 6397/report/data1.RData')
dim(data1)
library(fields)
library(gstat) 
library(sp) 
library(geoR)

#---------------------- Data Cleaning ------------------------------------------

general_data = data1 #Create a dataframe with the loaded dataset
nrow(general_data) #Check the number of rows of the dataset
sum(is.na(general_data)) # have about 20 rows with at least one missing value
colSums(is.na(general_data))  # check to see what columns have the missing values 

new_data <- na.omit(general_data) #create a new dataset without missing values
nrow(new_data) #check number of rows of new dataset without missing values
sum(is.na(new_data)) #check to see if all missing values have been removed

set.seed(222)
# 1500 sample data
sample_data = new_data[sample(1:dim(new_data)[1],1500), ] #create a sample dataset of 1500 rows
nrow(sample_data)#check to see if sample dataset has 1500 rows
# 100 kriging data 
sample_kriging_data = new_data[sample(setdiff(1:dim(new_data)[1], sample_data),100),] # 100 location for kriging
nrow(sample_kriging_data)


# log transformation of mean_house_value? 
hist(sample_data$median_house_value)
hist(log(sample_data$median_house_value))


qqnorm(sample_data$median_house_value)
qqline(sample_data$median_house_value)

qqnorm(log(sample_data$median_house_value))
qqline(log(sample_data$median_house_value))

hist(res0);qqnorm(res0);qqline(res0)
# best to take the log of the median_house_value for better normality results
# later see that using the residual as the predicting value is the best option ? 


# variables to use for covariates variables ro help describe dependent variable ??
par(mfrow=c(2,3))
plot(sample_data$housing_median_age,      log(sample_data$median_house_value)) # no clear linear/non-linear trend 
plot(sample_data$total_bedrooms,          log(sample_data$median_house_value)) # some what of a pos linear trend, but not strong  
plot(sample_data$median_income,           log(sample_data$median_house_value)) # much more significant , pos trend

plot(sample_data$longitude,      log(sample_data$median_house_value)) # not really see a sig. relationship b/t house_median_value
plot(sample_data$latitude,       log(sample_data$median_house_value)) # and long./ lat 
par(mfrow=c(1,1))


# Use the same linear regression model you used in team report 1 (with the same covariates)
# parameters: total_bedrooms,   median_income,  housing_median_age

# linear regression model from report 1
fit0 = lm(log(median_house_value) ~ total_bedrooms+ 
           median_income+housing_median_age + 
            longitude+latitude,  data = sample_data)
summary(fit0)
res0 = fit0$residuals
summary(res0)

plot(res0)
quilt.plot(sample_data$longitude, sample_data$latitude, res0)

hist(res0);qqnorm(res0);qqline(res0)

par(mfrow=c(2,3))
plot(sample_data$housing_median_age,      res0) # no clear linear/non-linear trend 
plot(sample_data$total_bedrooms,          res0) # some what of a pos linear trend, but not strong  
plot(sample_data$median_income,           res0) # much more significant , pos trend

plot(sample_data$longitude,               res0) # not really see a sig. relationship b/t house_median_value
plot(sample_data$latitude,                res0) # and long./ lat 
par(mfrow=c(1,1))

loc = cbind(sample_data$longitude, sample_data$latitude)

plot(vgram(loc,log(sample_data$median_house_value)),lon.lat=TRUE) #Signs of spacial varying mean
plot(vgram(loc,log(sample_data$median_house_value),dmax = 0.6), lon.lat=TRUE)

plot(vgram(loc,sample_data$median_house_value),lon.lat=TRUE) #still have Signs of spacial varying mean
plot(vgram(loc,res0),lon.lat=TRUE)  # use residual to get a better variogram plot
plot(vgram(loc,res0, dmax = 0.5),lon.lat=TRUE)  # set a dmax for the plot

# -----------  part 1-----------------------------------------------------------


## --- Exponential ===============================
loc = cbind(sample_data$longitude, sample_data$latitude)
y      <- log(sample_data$median_house_value) #value at loc
y_res  <- res0
x1     <- sample_data$total_bedrooms 
x2     <- sample_data$median_income  
x3     <- sample_data$housing_median_age 
x4     <- sample_data$longitude
x5     <- sample_data$latitude

vario1 = variog(coords=loc,
              data=y, 
              trend=trend.spatial(~x1+x2+x3+x4+x5) ) 
plot(vario1) 

vario.y_res = variog(coords=loc,
                     data=y_res, 
                     trend=trend.spatial(~x1+x2+x3+x4+x5)) 
plot(vario.y_res) 
#-----same exact variogram plot -------------------

# ------------------OLS
zz=rnorm(dim(sample_data)[1], 0,0.1) 
sample_data$longitudee=sample_data$longitude+zz 
locc = cbind(sample_data$longitudee, sample_data$latitude)


fit.expo.OLS=variofit(vario1, ini.cov.pars=c(0.15,0.2),
                      weights = 'equal',
                      cov.model = "exponential")
fit.expo.OLS
#variofit: model parameters estimated by OLS (ordinary least squares):
#  covariance model is: exponential
#parameter estimates:
#  tausq sigmasq     phi 
#0.0479  0.0542  0.0186 
#Practical Range with cor=0.05 for asymptotic range: 0.05568734
#variofit: minimised sum of squares = 0.0017

D <- rdist.earth(locc,miles = T) # distance

alpha = 0.0542
beta  = 0.0186
delta = 0.0479

  M <- cbind(rep(1, dim(D)[1]), x1,x2,x3,x4,x5) # design matrix
  S <- alpha*exp(-D/beta)                       # covareiance matrix 
  diag(S) = diag(S) + delta                     # nugget
  Z = matrix(res0, ncol = 1)
  
  B_estimate = solve(t(M) %*% (solve(S) %*% M) ) %*%  t(M)%*%solve(S) %*% Z

  print(B_estimate)

     -1.045835e+02
  x1  2.060834e-04
  x2  1.529699e-01
  x3  2.984820e-03
  x4 -1.168275e+00
  x5 -7.078880e-01
# with res0
      3.412858e-02
  x1  8.190126e-07
  x2 -2.121486e-04
  x3  5.032516e-05
  x4  6.013972e-04
  x5  1.008981e-03
  
# ----------------WLS

fit.expo.WLS=variofit(vario1, ini.cov.pars=c(0.15,0.2),
                      weights = 'npairs',
                      cov.model = "exponential") ## try many other models 
fit.expo.WLS
#variofit: model parameters estimated by WLS (weighted least squares):
#  covariance model is: exponential
#parameter estimates:
#  tausq sigmasq     phi 
#0.1058  0.0000  0.1792 
#Practical Range with cor=0.05 for asymptotic range: 0.5367151
#variofit: minimised weighted sum of squares = 139.1105

D <- rdist.earth(locc,miles = T) # distance

alpha = 0.0000
beta  = 0.1792
delta = 0.1058
  
  
  M <- cbind(rep(1, dim(D)[1]), x1,x2,x3,x4,x5) # design matrix
  S <- alpha*exp(-D/beta)                       # covareiance matrix 
  diag(S) = diag(S) + delta                     # nugget
  Z = matrix(res0, ncol = 1)
  
  B_estimate = solve(t(M) %*% (solve(S) %*% M) ) %*%  t(M)%*%solve(S) %*% Z
  
  print(B_estimate)

  

  -1.046176e+02
  x1  2.052644e-04
  x2  1.531820e-01
  x3  2.934495e-03
  x4 -1.168877e+00
  x5 -7.088970e-01
  
  # with res0
  
  1.524364e-11
  x1 1.144802e-17
  x2 1.086489e-15
  x3 7.771832e-16
  x4 1.351987e-13
  x5 5.555715e-14  




#--------------- REML
#likelihood method

fit.exp.reml=likfit(coords=locc, 
                 data=res0, 
                 trend=trend.spatial(~x1+x2+x3+x4+x5), # mean structure
                 lik.method = "REML",
                 cov.model = "exponential",
                 ini.cov.pars=c(0.15,0.2)) 
fit.exp.reml

#likfit: estimated model parameters:
#  beta0       beta1       beta2       beta3       beta4       beta5       tausq     sigmasq         phi 
#"-113.8558" "   0.0002" "   0.1391" "   0.0018" "  -1.2254" "  -0.6435" "   0.0738" "   0.0375" "   0.0777" 
#Practical Range with cor=0.05 for asymptotic range: 0.2326599
#likfit: maximised log-likelihood = -315.2

#------ with data = y_res, notice only the parameters change

#likfit: estimated model parameters:
#  beta0     beta1     beta2     beta3     beta4     beta5     tausq   sigmasq       phi 
#"-9.2381" " 0.0000" "-0.0141" "-0.0012" "-0.0565" " 0.0654" " 0.0738" " 0.0375" " 0.0777" 
#Practical Range with cor=0.05 for asymptotic range: 0.2326599
#likfit: maximised log-likelihood = -315.2
#==================================================================
#==================================================================
#==================================================================

## --- spherical ===============================

# reminder 
vario1 = variog(coords=loc,
                data=y, 
                trend=trend.spatial(~x1+x2+x3+x4+x5) ) 
plot(vario1) 

# ------------------OLS

fit.sph.OLS=variofit(vario1, ini.cov.pars=c(0.15,0.2),
                      weights = 'equal',
                     cov.model = "spherical") ## try many other models 
fit.sph.OLS
#variofit: model parameters estimated by OLS (ordinary least squares):
#  covariance model is: spherical
#parameter estimates:
#  tausq sigmasq     phi 
#0.0480  0.0542  0.0582 
#Practical Range with cor=0.05 for asymptotic range: 0.05819513
#variofit: minimised sum of squares = 0.0017


D <- rdist.earth(locc,miles = T) # distance

alpha = 0.0542
beta  = 0.0582
delta = 0.0480

  
  M <- cbind(rep(1, dim(D)[1]), x1,x2,x3,x4,x5)                 # design matrix
  S = alpha*(1-((3*D)/(2*beta))+((D**3)/(2*(beta**3))))  # covareiance matrix 
  diag(S) = diag(S) + delta                                     # nugget
  Z = matrix(res0, ncol = 1)
  
  B_estimate = solve(t(M) %*% (solve(S) %*% M) ) %*%  t(M)%*%solve(S) %*% Z
  
  print(B_estimate)

  1.524364e-11
  x1 1.144802e-17
  x2 1.086489e-15
  x3 7.771832e-16
  x4 1.351987e-13
  x5 5.555715e-14
# with res0
  1.524364e-11
  x1 1.144802e-17
  x2 1.086489e-15
  x3 7.771832e-16
  x4 1.351987e-13
  x5 5.555715e-14
# ----------------WLS

fit.sph.WLS=variofit(vario1, ini.cov.pars=c(0.15,0.2),
                      weights = 'npairs',
                     cov.model = "spherical") ## try many other models 
fit.sph.WLS
#variofit: model parameters estimated by WLS (weighted least squares):
#  covariance model is: spherical
#parameter estimates:
#  tausq sigmasq     phi 
#0.0480  0.0593  0.0663 
#Practical Range with cor=0.05 for asymptotic range: 0.06629026
#variofit: minimised weighted sum of squares = 116.589
D <- rdist.earth(locc,miles = T) # distance

alpha = 0.0593
beta  = 0.0663
delta = 0.0480


M <- cbind(rep(1, dim(D)[1]), x1,x2,x3,x4,x5)                 # design matrix
S = alpha*(1-((3*D)/(2*beta))+((D**3)/(2*(beta**3))))  # covareiance matrix 
diag(S) = diag(S) + delta                                     # nugget
Z = matrix(y, ncol = 1)

B_estimate = solve(t(M) %*% (solve(S) %*% M) ) %*%  t(M)%*%solve(S) %*% Z

print(B_estimate)

1.524364e-11
x1 1.144802e-17
x2 1.086489e-15
x3 7.771832e-16
x4 1.351987e-13
x5 5.555715e-14
# with res0

1.524364e-11
x1 1.144802e-17
x2 1.086489e-15
x3 7.771832e-16
x4 1.351987e-13
x5 5.555715e-14


#--------------- REML

fit.sph.reml=likfit(coords=locc, 
                    data=res0, 
                    trend=trend.spatial(~x1+x2+x3+x4+x5), # mean structure
                    lik.method = "REML",
                    cov.model = "spherical",
                    ini.cov.pars=c(0.15,0.2)) 
fit.sph.reml

#likfit: estimated model parameters:
#  beta0       beta1       beta2       beta3       beta4       beta5       tausq     sigmasq         phi 
#"-114.6095" "   0.0002" "   0.1395" "   0.0018" "  -1.2351" "  -0.6556" "   0.0761" "   0.0477" "   0.2225" 
#Practical Range with cor=0.05 for asymptotic range: 0.2224812
#likfit: maximised log-likelihood = -318.5


# with res0

#likfit: estimated model parameters:
#  beta0     beta1     beta2     beta3     beta4     beta5     tausq   sigmasq       phi 
#"-9.9918" " 0.0000" "-0.0137" "-0.0012" "-0.0663" " 0.0533" " 0.0761" " 0.0477" " 0.2225" 
#Practical Range with cor=0.05 for asymptotic range: 0.2224812
#likfit: maximised log-likelihood = -318.5










